{"ast":null,"code":"var _jsxFileName = \"/Users/ianrooney/dd/Fit-Ai-Front-master/src/components/DietForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styles from './DietPlanForm.module.css';\nimport Spinner from './Spinner';\nimport { fetchUserPreferences, getDietPlan, generateDietPlan } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DietForm = () => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [dietPlan, setDietPlan] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [generating, setGenerating] = useState(false);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (!token) return; // No token => do nothing or redirect\n\n    setLoading(true);\n    fetchUserPreferences(token).then(data => {\n      if (!data) return;\n      setUserData(data);\n      return getDietPlan(token);\n    }).then(plan => {\n      if (plan && plan.dietPlan) {\n        // Try to parse as JSON first\n        try {\n          const parsed = JSON.parse(plan.dietPlan);\n          setDietPlan(parsed);\n        } catch (err) {\n          // Fallback: parse as plain text\n          setDietPlan(parseDietPlan(plan.dietPlan));\n        }\n      }\n    }).catch(error => {\n      console.error('Error fetching diet plan:', error);\n    }).finally(() => setLoading(false));\n  }, []);\n\n  /**\n   * parseDietPlan\n   * -----------\n   * Fallback parser if the dietPlan is a plain text format. \n   * Splits the text by blank lines (\\n\\n) for each \"day\",\n   * and then splits each dayâ€™s lines by \" - \".\n   *\n   * Expected text format example:\n   *    Day 1\n   *    Breakfast - Oatmeal - with blueberries\n   *    Lunch - Chicken Salad - with lettuce and tomatoes\n   *\n   *    Day 2\n   *    Breakfast - Eggs - scrambled\n   *    ...\n   */\n  const parseDietPlan = (dietPlanText = '') => {\n    if (!dietPlanText.trim()) return [];\n    return dietPlanText.split('\\n\\n') // Split into day blocks by blank lines\n    .map(dayBlock => {\n      const lines = dayBlock.trim().split('\\n').map(line => line.trim());\n      if (!lines.length) return null;\n\n      // First line is \"Day X\" or similar\n      const rawDayName = lines[0];\n      // Remove \"Day \" prefix if it exists, so \"Day 1\" => \"1\"\n      const dayNumber = rawDayName.replace(/^Day\\s*/i, '');\n\n      // Remaining lines describe meals\n      const mealLines = lines.slice(1);\n      const meals = mealLines.map(line => {\n        // Example line: \"Breakfast - Oatmeal - with blueberries\"\n        const [type, meal, description] = line.split(' - ').map(str => str.trim());\n        return {\n          type: type || 'Meal',\n          // e.g. \"Breakfast\"\n          meal: meal || 'Untitled meal',\n          // e.g. \"Oatmeal\"\n          description: description || '' // e.g. \"with blueberries\"\n        };\n      });\n      return {\n        day: dayNumber,\n        // e.g. \"1\"\n        meals\n      };\n    }).filter(Boolean); // Remove any null entries\n  };\n\n  /**\n   * handleGenerateDiet\n   * -----------\n   * Generates a new diet plan based on user preferences.\n   * Some APIs return plain text, others return JSON. We handle JSON here.\n   */\n  const handleGenerateDiet = async () => {\n    setGenerating(true);\n    const token = localStorage.getItem('token');\n    if (!userData) {\n      console.error(\"No user preferences found!\");\n      setGenerating(false);\n      return;\n    }\n    try {\n      const response = await generateDietPlan(userData, token);\n      if (response && response.data.dietPlan) {\n        // If the API returns JSON, parse it\n        const parsedDietPlan = JSON.parse(response.data.dietPlan);\n        setDietPlan(parsedDietPlan);\n      } else {\n        console.error(\"API response doesn't contain a valid diet plan.\");\n      }\n    } catch (error) {\n      console.error(\"Error generating diet plan:\", error);\n    } finally {\n      setGenerating(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.dietPlanFormPage,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.generateButton,\n      onClick: handleGenerateDiet,\n      disabled: generating,\n      children: generating ? 'Generating...' : 'Generate Diet Plan'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.spinnerContainer,\n      children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this), !loading && dietPlan ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: dietPlan.map((planItem, dayIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '2rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Day \", planItem.day]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: planItem.meals.map((meal, mealIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              margin: '0.5rem 0'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [meal.type, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 21\n            }, this), \" \", meal.meal, meal.description ? ` â€” ${meal.description}` : '']\n          }, mealIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this)]\n      }, dayIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this) : !loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.noPlanMessage,\n      children: \"No diet plan available. Click \\\"Generate Diet Plan\\\" to create one updated.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(DietForm, \"bvdTkg2ojOwSyi2m7HV5by2pDN8=\");\n_c = DietForm;\nexport default DietForm;\nvar _c;\n$RefreshReg$(_c, \"DietForm\");","map":{"version":3,"names":["React","useEffect","useState","styles","Spinner","fetchUserPreferences","getDietPlan","generateDietPlan","jsxDEV","_jsxDEV","DietForm","_s","userData","setUserData","dietPlan","setDietPlan","loading","setLoading","generating","setGenerating","token","localStorage","getItem","then","data","plan","parsed","JSON","parse","err","parseDietPlan","catch","error","console","finally","dietPlanText","trim","split","map","dayBlock","lines","line","length","rawDayName","dayNumber","replace","mealLines","slice","meals","type","meal","description","str","day","filter","Boolean","handleGenerateDiet","response","parsedDietPlan","className","dietPlanFormPage","children","generateButton","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","spinnerContainer","planItem","dayIndex","style","marginBottom","mealIndex","margin","noPlanMessage","_c","$RefreshReg$"],"sources":["/Users/ianrooney/dd/Fit-Ai-Front-master/src/components/DietForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styles from './DietPlanForm.module.css';\nimport Spinner from './Spinner';\nimport { fetchUserPreferences, getDietPlan, generateDietPlan } from '../services/api';\n\nconst DietForm = () => {\n  const [userData, setUserData] = useState(null);\n  const [dietPlan, setDietPlan] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [generating, setGenerating] = useState(false);\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (!token) return; // No token => do nothing or redirect\n\n    setLoading(true);\n\n    fetchUserPreferences(token)\n      .then((data) => {\n        if (!data) return;\n        setUserData(data);\n        return getDietPlan(token);\n      })\n      .then((plan) => {\n        if (plan && plan.dietPlan) {\n          // Try to parse as JSON first\n          try {\n            const parsed = JSON.parse(plan.dietPlan);\n            setDietPlan(parsed);\n          } catch (err) {\n            // Fallback: parse as plain text\n            setDietPlan(parseDietPlan(plan.dietPlan));\n          }\n        }\n      })\n      .catch((error) => {\n        console.error('Error fetching diet plan:', error);\n      })\n      .finally(() => setLoading(false));\n  }, []);\n\n  /**\n   * parseDietPlan\n   * -----------\n   * Fallback parser if the dietPlan is a plain text format. \n   * Splits the text by blank lines (\\n\\n) for each \"day\",\n   * and then splits each dayâ€™s lines by \" - \".\n   *\n   * Expected text format example:\n   *    Day 1\n   *    Breakfast - Oatmeal - with blueberries\n   *    Lunch - Chicken Salad - with lettuce and tomatoes\n   *\n   *    Day 2\n   *    Breakfast - Eggs - scrambled\n   *    ...\n   */\n  const parseDietPlan = (dietPlanText = '') => {\n    if (!dietPlanText.trim()) return [];\n\n    return dietPlanText\n      .split('\\n\\n') // Split into day blocks by blank lines\n      .map((dayBlock) => {\n        const lines = dayBlock.trim().split('\\n').map((line) => line.trim());\n        if (!lines.length) return null;\n\n        // First line is \"Day X\" or similar\n        const rawDayName = lines[0];\n        // Remove \"Day \" prefix if it exists, so \"Day 1\" => \"1\"\n        const dayNumber = rawDayName.replace(/^Day\\s*/i, '');\n\n        // Remaining lines describe meals\n        const mealLines = lines.slice(1);\n        const meals = mealLines.map((line) => {\n          // Example line: \"Breakfast - Oatmeal - with blueberries\"\n          const [type, meal, description] = line.split(' - ').map((str) => str.trim());\n          return {\n            type: type || 'Meal',          // e.g. \"Breakfast\"\n            meal: meal || 'Untitled meal', // e.g. \"Oatmeal\"\n            description: description || '' // e.g. \"with blueberries\"\n          };\n        });\n\n        return {\n          day: dayNumber, // e.g. \"1\"\n          meals\n        };\n      })\n      .filter(Boolean); // Remove any null entries\n  };\n\n  /**\n   * handleGenerateDiet\n   * -----------\n   * Generates a new diet plan based on user preferences.\n   * Some APIs return plain text, others return JSON. We handle JSON here.\n   */\n  const handleGenerateDiet = async () => {\n    setGenerating(true);\n    const token = localStorage.getItem('token');\n\n    if (!userData) {\n      console.error(\"No user preferences found!\");\n      setGenerating(false);\n      return;\n    }\n\n    try {\n      const response = await generateDietPlan(userData, token);\n      if (response && response.data.dietPlan) {\n        // If the API returns JSON, parse it\n        const parsedDietPlan = JSON.parse(response.data.dietPlan);\n        setDietPlan(parsedDietPlan);\n      } else {\n        console.error(\"API response doesn't contain a valid diet plan.\");\n      }\n    } catch (error) {\n      console.error(\"Error generating diet plan:\", error);\n    } finally {\n      setGenerating(false);\n    }\n  };\n\n  return (\n    <div className={styles.dietPlanFormPage}>\n      {/* Button to Generate Diet Plan */}\n      <button\n        className={styles.generateButton}\n        onClick={handleGenerateDiet}\n        disabled={generating}\n      >\n        {generating ? 'Generating...' : 'Generate Diet Plan'}\n      </button>\n\n      {/* Show a loading spinner while fetching existing plan */}\n      {loading && (\n        <div className={styles.spinnerContainer}>\n          <Spinner />\n        </div>\n      )}\n\n      {/* Display the diet plan if available */}\n      {!loading && dietPlan ? (\n        <div>\n          {dietPlan.map((planItem, dayIndex) => (\n            <div key={dayIndex} style={{ marginBottom: '2rem' }}>\n              <h2>Day {planItem.day}</h2>\n              <ul>\n                {planItem.meals.map((meal, mealIndex) => (\n                  <li key={mealIndex} style={{ margin: '0.5rem 0' }}>\n                    <strong>{meal.type}:</strong> {meal.meal}\n                    {meal.description ? ` â€” ${meal.description}` : ''}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n      ) : (\n        !loading && (\n          <p className={styles.noPlanMessage}>\n            No diet plan available. Click \"Generate Diet Plan\" to create one updated.\n          </p>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default DietForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}