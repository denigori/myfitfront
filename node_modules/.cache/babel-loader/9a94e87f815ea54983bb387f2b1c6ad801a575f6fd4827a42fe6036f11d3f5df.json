{"ast":null,"code":"var _jsxFileName = \"/Users/ianrooney/dd/Fit-Ai-Front-master/src/components/DietPlan.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport styles from \"./DietPlan.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchDailyDietPlan, markDayAsCompleted } from \"../store/actions/dietActions\";\nimport Popup from \"./InstructionsPopup\";\nimport Spinner from \"./Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DietPlan = ({\n  dietPlan\n}) => {\n  _s();\n  const token = localStorage.getItem(\"token\") || \"\";\n  const dispatch = useDispatch();\n  const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  const [selectedItem, setSelectedItem] = useState(\"\");\n  const [selectedRow, setSelectedRow] = useState(\"\");\n  const loading = useSelector(state => state.dailyDiet.loading);\n  const completedDays = useSelector(state => state.dailyDiet.completedDays);\n\n  // Assuming the diet plan starts on the 1st of a given month\n  const startDayIndex = new Date().getDay();\n  const totalDaysInMonth = dietPlan.length;\n  const handleDayClick = dietData => {\n    dispatch(fetchDailyDietPlan({\n      dietData,\n      token\n    }));\n  };\n  const handleCompletionToggle = index => {\n    dispatch(markDayAsCompleted(index));\n  };\n  console.log(\"start Date Index\", dietPlan);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.dietPlanCalendar,\n    children: [daysOfWeek.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.dayHeader,\n      children: day\n    }, day, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)), Array.from({\n      length: startDayIndex\n    }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.emptyDay\n    }, `empty-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)), dietPlan.map((dayPlan, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.dayCard} ${completedDays.includes(index) ? styles.completedDay : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.dayNumber,\n        children: index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: styles.mealsList,\n        children: dayPlan.meals && dayPlan.meals.length !== 0 ? dayPlan.meals.map((meal, mealIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: selectedItem === mealIndex && selectedRow === index && loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              margin: \"5px\",\n              marginLeft: \"70px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(\"li\", {\n            className: styles.mealItem,\n            onClick: e => {\n              e.stopPropagation();\n              setSelectedItem(mealIndex);\n              setSelectedRow(index);\n              handleDayClick(meal);\n            },\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: meal.meal\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this)\n        }, mealIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n          className: styles.specialNote,\n          children: dayPlan.day\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.dayFooter,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${styles.completeButton} ${completedDays.includes(index) ? styles.completed : \"\"}`,\n          onClick: () => handleCompletionToggle(index),\n          children: completedDays.includes(index) ? \"Completed\" : \"Mark as Complete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.dayFooter,\n        children: `Day ${index + 1}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)), Array.from({\n      length: (7 - (startDayIndex + totalDaysInMonth) % 7) % 7\n    }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.emptyDay\n    }, `filler-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Popup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(DietPlan, \"hihg2GMNfjOsTugixm1NnBMRkXU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = DietPlan;\nexport default DietPlan;\nvar _c;\n$RefreshReg$(_c, \"DietPlan\");","map":{"version":3,"names":["React","useState","styles","useDispatch","useSelector","fetchDailyDietPlan","markDayAsCompleted","Popup","Spinner","jsxDEV","_jsxDEV","DietPlan","dietPlan","_s","token","localStorage","getItem","dispatch","daysOfWeek","selectedItem","setSelectedItem","selectedRow","setSelectedRow","loading","state","dailyDiet","completedDays","startDayIndex","Date","getDay","totalDaysInMonth","length","handleDayClick","dietData","handleCompletionToggle","index","console","log","className","dietPlanCalendar","children","map","day","dayHeader","fileName","_jsxFileName","lineNumber","columnNumber","Array","from","_","emptyDay","dayPlan","dayCard","includes","completedDay","dayNumber","mealsList","meals","meal","mealIndex","Fragment","style","margin","marginLeft","mealItem","onClick","e","stopPropagation","specialNote","dayFooter","completeButton","completed","_c","$RefreshReg$"],"sources":["/Users/ianrooney/dd/Fit-Ai-Front-master/src/components/DietPlan.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./DietPlan.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  fetchDailyDietPlan,\n  markDayAsCompleted,\n} from \"../store/actions/dietActions\";\nimport Popup from \"./InstructionsPopup\";\nimport Spinner from \"./Spinner\";\n\nconst DietPlan = ({ dietPlan }) => {\n  const token = localStorage.getItem(\"token\") || \"\";\n  const dispatch = useDispatch();\n  const daysOfWeek = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n  const [selectedItem, setSelectedItem] = useState(\"\");\n  const [selectedRow, setSelectedRow] = useState(\"\");\n  const loading = useSelector((state) => state.dailyDiet.loading);\n  const completedDays = useSelector((state) => state.dailyDiet.completedDays);\n\n  // Assuming the diet plan starts on the 1st of a given month\n  const startDayIndex = new Date().getDay();\n  const totalDaysInMonth = dietPlan.length;\n\n  const handleDayClick = (dietData) => {\n    dispatch(fetchDailyDietPlan({ dietData, token }));\n  };\n\n  const handleCompletionToggle = (index) => {\n    dispatch(markDayAsCompleted(index));\n  };\n  console.log(\"start Date Index\", dietPlan);\n\n  return (\n    <div className={styles.dietPlanCalendar}>\n      {/* Render day headers */}\n      {daysOfWeek.map((day) => (\n        <div key={day} className={styles.dayHeader}>\n          {day}\n        </div>\n      ))}\n\n      {/* Render empty cells for the days before the 1st of the month */}\n      {Array.from({ length: startDayIndex }).map((_, index) => (\n        <div key={`empty-${index}`} className={styles.emptyDay}></div>\n      ))}\n\n      {/* Render day cards for the diet plan */}\n      {dietPlan.map((dayPlan, index) => (\n        <div\n          key={index}\n          className={`${styles.dayCard} ${\n            completedDays.includes(index) ? styles.completedDay : \"\"\n          }`}\n        >\n          <div className={styles.dayNumber}>{index + 1}</div>\n          <ul className={styles.mealsList}>\n            {dayPlan.meals && dayPlan.meals.length !== 0 ? (\n              dayPlan.meals.map((meal, mealIndex) => (\n                <React.Fragment key={mealIndex}>\n                  {selectedItem === mealIndex &&\n                  selectedRow === index &&\n                  loading ? (\n                    <div style={{ margin: \"5px\", marginLeft: \"70px\" }}>\n                      <Spinner />\n                    </div>\n                  ) : (\n                    <li\n                      className={styles.mealItem}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setSelectedItem(mealIndex);\n                        setSelectedRow(index);\n                        handleDayClick(meal);\n                      }}\n                    >\n                      <strong>{meal.meal}</strong>\n                    </li>\n                  )}\n                </React.Fragment>\n              ))\n            ) : (\n              <li className={styles.specialNote}>{dayPlan.day}</li>\n            )}\n          </ul>\n          <div className={styles.dayFooter}>\n            <button\n              className={`${styles.completeButton} ${\n                completedDays.includes(index) ? styles.completed : \"\"\n              }`}\n              onClick={() => handleCompletionToggle(index)}\n            >\n              {completedDays.includes(index) ? \"Completed\" : \"Mark as Complete\"}\n            </button>\n          </div>\n          <div className={styles.dayFooter}>{`Day ${index + 1}`}</div>\n        </div>\n      ))}\n\n      {/* Fill remaining cells to complete the last week */}\n      {Array.from({\n        length: (7 - ((startDayIndex + totalDaysInMonth) % 7)) % 7,\n      }).map((_, index) => (\n        <div key={`filler-${index}`} className={styles.emptyDay}></div>\n      ))}\n\n      <Popup />\n    </div>\n  );\n};\n\nexport default DietPlan;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}