{"ast":null,"code":"var _jsxFileName = \"/Users/ianrooney/dd/Fit-Ai-Front-master/src/components/DietForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styles from './DietPlanForm.module.css';\nimport Spinner from './Spinner';\nimport DietPlan from './DietPlan';\nimport { fetchUserPreferences, getDietPlan, generateDietPlan } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DietForm = () => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [dietPlan, setDietPlan] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [generating, setGenerating] = useState(false);\n\n  // useEffect(() => {\n  //   setLoading(true);\n  //   const token = localStorage.getItem('token');\n\n  //   fetchUserPreferences(token)\n  //     .then((data) => {\n  //       if (!data) {\n  //         setLoading(false);\n  //         return;\n  //       }\n  //       setUserData(data);\n  //       return getDietPlan(token);\n  //     })\n  //     .then((plan) => {\n  //       if (plan) setDietPlan(parseDietPlan(plan.dietPlan));\n  //     })\n  //     .catch((error) => console.error(\"Error fetching diet plan:\", error))\n  //     .finally(() => setLoading(false));\n  // }, []);\n\n  function parseDietPlann(dietPlanText) {\n    if (!dietPlanText) {\n      console.error(\"❌ No diet plan text provided.\");\n      return [];\n    }\n    const days = dietPlanText.split('---').filter(day => day.trim() !== ''); // Split by \"---\" and remove empty entries\n    const structuredDietPlan = [];\n    days.forEach(dayText => {\n      const lines = dayText.trim().split('\\n').filter(line => line.trim() !== ''); // Split into lines & remove empty ones\n\n      if (lines.length === 0) return;\n      const dayTitle = lines[0].replace(/\\*\\*/g, '').trim(); // Extract \"Day X\" (remove markdown **)\n      const meals = [];\n      for (let i = 1; i < lines.length; i++) {\n        // Matches \"**Meal Type:** Description\"\n        const match = lines[i].match(/-\\s\\*\\*(.+?)\\*\\*:\\s(.+)/);\n        if (match) {\n          meals.push({\n            meal: match[1].trim(),\n            // Meal Type (e.g., Breakfast, Snack)\n            description: match[2].trim() // Description (e.g., Turkey and avocado omelette)\n          });\n        }\n      }\n      structuredDietPlan.push({\n        day: dayTitle,\n        meals: meals.length > 0 ? meals : []\n      });\n    });\n    return structuredDietPlan;\n  }\n  const handleGenerateDiet = async () => {\n    setGenerating(true);\n    const token = localStorage.getItem('token');\n    if (!userData) {\n      console.error(\"❌ No user preferences found!\");\n      setGenerating(false);\n      return;\n    }\n    try {\n      console.log(\"📤 Sending user preferences to API:\", userData);\n      const response = await generateDietPlan(userData, token);\n      console.log('response dietplan', response.data.dietPlan);\n      const structuredDietPlan = JSON.parse(response.data.dietPlan);\n      console.log('structureddietplan', structuredDietPlan);\n      if (response && response.data.dietPlan) {\n        console.log(\"✅ Received generated diet plan:\", response.data.dietPlan);\n        setDietPlan(response.data.dietPlan);\n      } else {\n        console.error(\"❌ API response does not contain a valid diet plan.\");\n      }\n    } catch (error) {\n      console.error(\"❌ Error generating diet plan:\", error);\n    } finally {\n      setGenerating(false);\n    }\n  };\n  const parseDietPlan = dietPlanText => {\n    return dietPlanText.split('\\n\\n').map(dayText => {\n      const [dayName, ...mealLines] = dayText.trim().split('\\n');\n      const meals = mealLines.map(line => {\n        const [mealType, description] = line.split(' - ').map(str => str.trim());\n        return {\n          meal: mealType,\n          description\n        };\n      });\n      return {\n        day: dayName,\n        meals\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.dietPlanFormPage,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.generateButton,\n      onClick: handleGenerateDiet,\n      disabled: generating,\n      children: generating ? \"Generating...\" : \"Generate Diet Plan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.spinnerContainer,\n      children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this), !loading && dietPlan ? /*#__PURE__*/_jsxDEV(DietPlan, {\n      dietPlan: dietPlan\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.noPlanMessage,\n      children: \"No diet plan available. Click \\\"Generate Diet Plan\\\" to create one.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(DietForm, \"2B2zE1zpplCRG6+sLxxngdg/VhY=\");\n_c = DietForm;\nexport default DietForm;\nvar _c;\n$RefreshReg$(_c, \"DietForm\");","map":{"version":3,"names":["React","useEffect","useState","styles","Spinner","DietPlan","fetchUserPreferences","getDietPlan","generateDietPlan","jsxDEV","_jsxDEV","DietForm","_s","userData","setUserData","dietPlan","setDietPlan","loading","setLoading","generating","setGenerating","parseDietPlann","dietPlanText","console","error","days","split","filter","day","trim","structuredDietPlan","forEach","dayText","lines","line","length","dayTitle","replace","meals","i","match","push","meal","description","handleGenerateDiet","token","localStorage","getItem","log","response","data","JSON","parse","parseDietPlan","map","dayName","mealLines","mealType","str","className","dietPlanFormPage","children","generateButton","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","spinnerContainer","noPlanMessage","_c","$RefreshReg$"],"sources":["/Users/ianrooney/dd/Fit-Ai-Front-master/src/components/DietForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styles from './DietPlanForm.module.css';\nimport Spinner from './Spinner';\nimport DietPlan from './DietPlan';\nimport { fetchUserPreferences, getDietPlan, generateDietPlan } from '../services/api';\n\nconst DietForm = () => {\n  const [userData, setUserData] = useState(null);\n  const [dietPlan, setDietPlan] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [generating, setGenerating] = useState(false);\n  \n  // useEffect(() => {\n  //   setLoading(true);\n  //   const token = localStorage.getItem('token');\n\n  //   fetchUserPreferences(token)\n  //     .then((data) => {\n  //       if (!data) {\n  //         setLoading(false);\n  //         return;\n  //       }\n  //       setUserData(data);\n  //       return getDietPlan(token);\n  //     })\n  //     .then((plan) => {\n  //       if (plan) setDietPlan(parseDietPlan(plan.dietPlan));\n  //     })\n  //     .catch((error) => console.error(\"Error fetching diet plan:\", error))\n  //     .finally(() => setLoading(false));\n  // }, []);\n\n\n  function parseDietPlann(dietPlanText) {\n    if (!dietPlanText) {\n      console.error(\"❌ No diet plan text provided.\");\n      return [];\n    }\n  \n    const days = dietPlanText.split('---').filter(day => day.trim() !== ''); // Split by \"---\" and remove empty entries\n    const structuredDietPlan = [];\n  \n    days.forEach((dayText) => {\n      const lines = dayText.trim().split('\\n').filter(line => line.trim() !== ''); // Split into lines & remove empty ones\n  \n      if (lines.length === 0) return;\n  \n      const dayTitle = lines[0].replace(/\\*\\*/g, '').trim(); // Extract \"Day X\" (remove markdown **)\n      const meals = [];\n  \n      for (let i = 1; i < lines.length; i++) {\n        // Matches \"**Meal Type:** Description\"\n        const match = lines[i].match(/-\\s\\*\\*(.+?)\\*\\*:\\s(.+)/);\n        if (match) {\n          meals.push({\n            meal: match[1].trim(), // Meal Type (e.g., Breakfast, Snack)\n            description: match[2].trim() // Description (e.g., Turkey and avocado omelette)\n          });\n        }\n      }\n  \n      structuredDietPlan.push({\n        day: dayTitle,\n        meals: meals.length > 0 ? meals : []\n      });\n    });\n  \n    return structuredDietPlan;\n  }\n  \n\n  const handleGenerateDiet = async () => {\n    setGenerating(true);\n    const token = localStorage.getItem('token');\n\n    if (!userData) {\n      console.error(\"❌ No user preferences found!\");\n      setGenerating(false);\n      return;\n    }\n\n    try {\n      console.log(\"📤 Sending user preferences to API:\", userData);\n      const response = await generateDietPlan(userData, token);\n      console.log('response dietplan',response.data.dietPlan);\n      const structuredDietPlan = JSON.parse(response.data.dietPlan);\n      console.log('structureddietplan',structuredDietPlan);\n   \n      \n      if (response && response.data.dietPlan) {\n        console.log(\"✅ Received generated diet plan:\", response.data.dietPlan);\n        setDietPlan(response.data.dietPlan);\n      } else {\n        console.error(\"❌ API response does not contain a valid diet plan.\");\n      }\n    } catch (error) {\n      console.error(\"❌ Error generating diet plan:\", error);\n    } finally {\n      setGenerating(false);\n    }\n  };\n\n  const parseDietPlan = (dietPlanText) => {\n    return dietPlanText\n      .split('\\n\\n')\n      .map((dayText) => {\n        const [dayName, ...mealLines] = dayText.trim().split('\\n');\n        const meals = mealLines.map((line) => {\n          const [mealType, description] = line.split(' - ').map((str) => str.trim());\n          return { meal: mealType, description };\n        });\n        return { day: dayName, meals };\n      });\n  };\n\n  return (\n    <div className={styles.dietPlanFormPage}>\n      {/* Generate Diet Button */}\n      <button \n        className={styles.generateButton} \n        onClick={handleGenerateDiet} \n        disabled={generating}\n      >\n        {generating ? \"Generating...\" : \"Generate Diet Plan\"}\n      </button>\n\n      {loading && (\n        <div className={styles.spinnerContainer}>\n          <Spinner />\n        </div>\n      )}\n\n      {!loading && dietPlan ? (\n        <DietPlan dietPlan={dietPlan} />\n      ) : (\n        <p className={styles.noPlanMessage}>No diet plan available. Click \"Generate Diet Plan\" to create one.</p>\n      )}\n    </div>\n  );\n};\n\nexport default DietForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}